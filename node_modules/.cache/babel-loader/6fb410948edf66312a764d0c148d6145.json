{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useComponentSize = void 0;\nexports.useDeepCompareEffect = useDeepCompareEffect;\nexports.useDeepMemo = useDeepMemo;\nexports.useSnowflakes = exports.useSnowfallStyle = void 0;\n\nvar _react = require(\"react\");\n\nvar _reactFastCompare = _interopRequireDefault(require(\"react-fast-compare\"));\n\nvar _Snowflake = _interopRequireDefault(require(\"./Snowflake\"));\n\nvar _config = require(\"./config\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\r\n * A utility function to create a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\n\n\nvar createSnowflakes = function createSnowflakes(canvasRef, amount, config) {\n  if (!canvasRef.current) return [];\n  var snowflakes = [];\n\n  for (var i = 0; i < amount; i++) {\n    snowflakes.push(new _Snowflake[\"default\"](canvasRef.current, config));\n  }\n\n  return snowflakes;\n};\n/**\r\n * A utility hook to manage creating and updating a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\n\n\nvar useSnowflakes = function useSnowflakes(canvasRef, amount, config) {\n  var _useState = (0, _react.useState)([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      snowflakes = _useState2[0],\n      setSnowflakes = _useState2[1]; // Handle change of amount\n\n\n  (0, _react.useEffect)(function () {\n    setSnowflakes(function (snowflakes) {\n      var sizeDifference = amount - snowflakes.length;\n\n      if (sizeDifference > 0) {\n        return [].concat(_toConsumableArray(snowflakes), _toConsumableArray(createSnowflakes(canvasRef, sizeDifference, config)));\n      }\n\n      if (sizeDifference < 0) {\n        return snowflakes.slice(0, amount);\n      }\n\n      return snowflakes;\n    });\n  }, [amount, canvasRef, config]); // Handle change of config\n\n  (0, _react.useEffect)(function () {\n    setSnowflakes(function (snowflakes) {\n      return snowflakes.map(function (snowflake) {\n        snowflake.updateConfig(config);\n        return snowflake;\n      });\n    });\n  }, [config]);\n  return snowflakes;\n};\n/**\r\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\r\n * size. Falls back to listening for resize events on the window.\r\n * @param ref A ref to the HTML element to be measured\r\n */\n\n\nexports.useSnowflakes = useSnowflakes;\n\nvar useComponentSize = function useComponentSize(ref) {\n  var _useState3 = (0, _react.useState)((0, _utils.getSize)(ref.current)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      size = _useState4[0],\n      setSize = _useState4[1];\n\n  var resizeHandler = (0, _react.useCallback)(function () {\n    if (ref.current) {\n      setSize((0, _utils.getSize)(ref.current));\n    }\n  }, [ref]);\n  (0, _react.useLayoutEffect)(function () {\n    var _window = window,\n        ResizeObserver = _window.ResizeObserver;\n    if (!ref.current) return;\n    resizeHandler();\n\n    if (typeof ResizeObserver === 'function') {\n      var resizeObserver = new ResizeObserver(resizeHandler);\n      resizeObserver.observe(ref.current);\n      return function () {\n        return resizeObserver.disconnect();\n      };\n    } else {\n      window.addEventListener('resize', resizeHandler);\n      return function () {\n        return window.removeEventListener('resize', resizeHandler);\n      };\n    }\n  }, [ref, resizeHandler]);\n  return size;\n};\n/**\r\n * Utility hook that merges any provided styles with the default styles\r\n * @param overrides The style prop passed into the component\r\n */\n\n\nexports.useComponentSize = useComponentSize;\n\nvar useSnowfallStyle = function useSnowfallStyle(overrides) {\n  var styles = (0, _react.useMemo)(function () {\n    return _objectSpread(_objectSpread({}, _config.snowfallBaseStyle), overrides || {});\n  }, [overrides]);\n  return styles;\n};\n/**\r\n * Same as `React.useEffect` but uses a deep comparison on the dependency array. This should only\r\n * be used when working with non-primitive dependencies.\r\n *\r\n * @param effect Effect callback to run\r\n * @param deps Effect dependencies\r\n */\n\n\nexports.useSnowfallStyle = useSnowfallStyle;\n\nfunction useDeepCompareEffect(effect, deps) {\n  var ref = (0, _react.useRef)(deps); // Only update the current dependencies if they are not deep equal\n\n  if (!(0, _reactFastCompare[\"default\"])(deps, ref.current)) {\n    ref.current = deps;\n  } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  return (0, _react.useEffect)(effect, ref.current);\n}\n/**\r\n * Utility hook to stabilize a reference to a value, the returned value will always match the input value\r\n * but (unlike an inline object) will maintain [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * equality until a change is made.\r\n *\r\n * @example\r\n *\r\n * const obj = useDeepMemo({ foo: 'bar', bar: 'baz' }) // <- inline object creation\r\n * const prevValue = usePrevious(obj) // <- value from the previous render\r\n * console.log(obj === prevValue) // <- always logs true until value changes\r\n */\n\n\nfunction useDeepMemo(value) {\n  var _useState5 = (0, _react.useState)(value),\n      _useState6 = _slicedToArray(_useState5, 2),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  useDeepCompareEffect(function () {\n    return setState(value);\n  }, [value]);\n  return state;\n}","map":{"version":3,"sources":["../src/hooks.ts"],"names":["createSnowflakes","canvasRef","snowflakes","i","Snowflake","useSnowflakes","setSnowflakes","sizeDifference","amount","snowflake","useComponentSize","size","setSize","ref","resizeHandler","ResizeObserver","resizeObserver","window","useSnowfallStyle","styles","snowfallBaseStyle","overrides","state","setState","useDeepCompareEffect"],"mappings":"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","sourcesContent":["import { useCallback, useLayoutEffect, useEffect, useRef, useState, useMemo } from 'react'\r\nimport isEqual from 'react-fast-compare'\r\nimport Snowflake, { SnowflakeConfig } from './Snowflake'\r\nimport { snowfallBaseStyle } from './config'\r\nimport { getSize } from './utils'\r\n\r\n/**\r\n * A utility function to create a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nconst createSnowflakes = (\r\n  canvasRef: React.RefObject<HTMLCanvasElement>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n): Snowflake[] => {\r\n  if (!canvasRef.current) return []\r\n\r\n  const snowflakes: Snowflake[] = []\r\n\r\n  for (let i = 0; i < amount; i++) {\r\n    snowflakes.push(new Snowflake(canvasRef.current, config))\r\n  }\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * A utility hook to manage creating and updating a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nexport const useSnowflakes = (\r\n  canvasRef: React.RefObject<HTMLCanvasElement>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n) => {\r\n  const [snowflakes, setSnowflakes] = useState<Snowflake[]>([])\r\n\r\n  // Handle change of amount\r\n  useEffect(() => {\r\n    setSnowflakes((snowflakes) => {\r\n      const sizeDifference = amount - snowflakes.length\r\n\r\n      if (sizeDifference > 0) {\r\n        return [...snowflakes, ...createSnowflakes(canvasRef, sizeDifference, config)]\r\n      }\r\n\r\n      if (sizeDifference < 0) {\r\n        return snowflakes.slice(0, amount)\r\n      }\r\n\r\n      return snowflakes\r\n    })\r\n  }, [amount, canvasRef, config])\r\n\r\n  // Handle change of config\r\n  useEffect(() => {\r\n    setSnowflakes((snowflakes) =>\r\n      snowflakes.map((snowflake) => {\r\n        snowflake.updateConfig(config)\r\n        return snowflake\r\n      }),\r\n    )\r\n  }, [config])\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\r\n * size. Falls back to listening for resize events on the window.\r\n * @param ref A ref to the HTML element to be measured\r\n */\r\nexport const useComponentSize = (ref: React.RefObject<HTMLElement>) => {\r\n  const [size, setSize] = useState(getSize(ref.current))\r\n\r\n  const resizeHandler = useCallback(() => {\r\n    if (ref.current) {\r\n      setSize(getSize(ref.current))\r\n    }\r\n  }, [ref])\r\n\r\n  useLayoutEffect(() => {\r\n    const { ResizeObserver } = window\r\n\r\n    if (!ref.current) return\r\n    resizeHandler()\r\n\r\n    if (typeof ResizeObserver === 'function') {\r\n      const resizeObserver = new ResizeObserver(resizeHandler)\r\n      resizeObserver.observe(ref.current)\r\n\r\n      return () => resizeObserver.disconnect()\r\n    } else {\r\n      window.addEventListener('resize', resizeHandler)\r\n\r\n      return () => window.removeEventListener('resize', resizeHandler)\r\n    }\r\n  }, [ref, resizeHandler])\r\n\r\n  return size\r\n}\r\n\r\n/**\r\n * Utility hook that merges any provided styles with the default styles\r\n * @param overrides The style prop passed into the component\r\n */\r\nexport const useSnowfallStyle = (overrides?: React.CSSProperties): React.CSSProperties => {\r\n  const styles = useMemo(\r\n    () => ({\r\n      ...snowfallBaseStyle,\r\n      ...(overrides || {}),\r\n    }),\r\n    [overrides],\r\n  )\r\n\r\n  return styles\r\n}\r\n\r\n/**\r\n * Same as `React.useEffect` but uses a deep comparison on the dependency array. This should only\r\n * be used when working with non-primitive dependencies.\r\n *\r\n * @param effect Effect callback to run\r\n * @param deps Effect dependencies\r\n */\r\nexport function useDeepCompareEffect(effect: React.EffectCallback, deps: React.DependencyList) {\r\n  const ref = useRef<React.DependencyList>(deps)\r\n\r\n  // Only update the current dependencies if they are not deep equal\r\n  if (!isEqual(deps, ref.current)) {\r\n    ref.current = deps\r\n  }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  return useEffect(effect, ref.current)\r\n}\r\n\r\n/**\r\n * Utility hook to stabilize a reference to a value, the returned value will always match the input value\r\n * but (unlike an inline object) will maintain [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * equality until a change is made.\r\n *\r\n * @example\r\n *\r\n * const obj = useDeepMemo({ foo: 'bar', bar: 'baz' }) // <- inline object creation\r\n * const prevValue = usePrevious(obj) // <- value from the previous render\r\n * console.log(obj === prevValue) // <- always logs true until value changes\r\n */\r\nexport function useDeepMemo<T>(value: T): T {\r\n  const [state, setState] = useState(value)\r\n\r\n  useDeepCompareEffect(() => setState(value), [value])\r\n\r\n  return state\r\n}\r\n"]},"metadata":{},"sourceType":"script"}