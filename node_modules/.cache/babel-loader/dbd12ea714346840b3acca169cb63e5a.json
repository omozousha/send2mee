{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSize = getSize;\nexports.lerp = lerp;\nexports.random = random;\nexports.randomElement = randomElement;\n/**\r\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\r\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\r\n * @param min The minimum value\r\n * @param max The maximum value\r\n */\n\nfunction random(min, max) {\n  var randomNumber = Math.random() * (max - min + 1) + min;\n\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\n    return randomNumber;\n  } else {\n    return Math.floor(randomNumber);\n  }\n}\n/**\r\n * Linear interpolation function to gradually step towards a target value\r\n * @param start The current value\r\n * @param end The target value\r\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\r\n */\n\n\nfunction lerp(start, end, normal) {\n  return (1 - normal) * start + normal * end;\n}\n/**\r\n * Gets the height and width of the provided HTML element\r\n * @param element The html element to measure\r\n */\n\n\nfunction getSize(element) {\n  if (!element) return {\n    height: 0,\n    width: 0\n  };\n  return {\n    height: element.offsetHeight,\n    width: element.offsetWidth\n  };\n}\n/**\r\n * Selects a random item from an array of inputs.\r\n *\r\n * @param items The array of items to choose from\r\n * @returns A random item selected from the array\r\n */\n\n\nfunction randomElement(items) {\n  var index = Math.floor(Math.random() * items.length);\n  return items[index];\n}","map":{"version":3,"sources":["../src/utils.ts"],"names":["randomNumber","Math","max","Number","normal","height","width","element","offsetWidth","index","items"],"mappings":";;;;;;;;;AAAA;;;;;;;AAMO,SAAA,MAAA,CAAA,GAAA,EAAA,GAAA,EAAkD;AACvD,MAAMA,YAAY,GAAGC,IAAI,CAAJA,MAAAA,MAAiBC,GAAG,GAAHA,GAAAA,GAAjBD,CAAAA,IAArB,GAAA;;AAEA,MAAI,CAACE,MAAM,CAANA,SAAAA,CAAD,GAACA,CAAD,IAA0B,CAACA,MAAM,CAANA,SAAAA,CAA/B,GAA+BA,CAA/B,EAAsD;AACpD,WAAA,YAAA;AADF,GAAA,MAEO;AACL,WAAOF,IAAI,CAAJA,KAAAA,CAAP,YAAOA,CAAP;AACD;AACF;AAED;;;;;;;;AAMO,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAA0D;AAC/D,SAAO,CAAC,IAAD,MAAA,IAAA,KAAA,GAAuBG,MAAM,GAApC,GAAA;AACD;AAED;;;;;;AAIO,SAAA,OAAA,CAAA,OAAA,EAA+C;AACpD,MAAI,CAAJ,OAAA,EAAc,OAAO;AAAEC,IAAAA,MAAM,EAAR,CAAA;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAAP;AAEd,SAAO;AACLD,IAAAA,MAAM,EAAEE,OAAO,CADV,YAAA;AAELD,IAAAA,KAAK,EAAEC,OAAO,CAACC;AAFV,GAAP;AAID;AAED;;;;;;;;AAMO,SAAA,aAAA,CAAA,KAAA,EAAyC;AAC9C,MAAMC,KAAK,GAAGR,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,MAAAA,KAAgBS,KAAK,CAA9C,MAAcT,CAAd;AACA,SAAOS,KAAK,CAAZ,KAAY,CAAZ;AACD","sourcesContent":["/**\r\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\r\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\r\n * @param min The minimum value\r\n * @param max The maximum value\r\n */\r\nexport function random(min: number, max: number): number {\r\n  const randomNumber = Math.random() * (max - min + 1) + min\r\n\r\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\r\n    return randomNumber\r\n  } else {\r\n    return Math.floor(randomNumber)\r\n  }\r\n}\r\n\r\n/**\r\n * Linear interpolation function to gradually step towards a target value\r\n * @param start The current value\r\n * @param end The target value\r\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\r\n */\r\nexport function lerp(start: number, end: number, normal: number) {\r\n  return (1 - normal) * start + normal * end\r\n}\r\n\r\n/**\r\n * Gets the height and width of the provided HTML element\r\n * @param element The html element to measure\r\n */\r\nexport function getSize(element?: HTMLElement | null) {\r\n  if (!element) return { height: 0, width: 0 }\r\n\r\n  return {\r\n    height: element.offsetHeight,\r\n    width: element.offsetWidth,\r\n  }\r\n}\r\n\r\n/**\r\n * Selects a random item from an array of inputs.\r\n *\r\n * @param items The array of items to choose from\r\n * @returns A random item selected from the array\r\n */\r\nexport function randomElement<T>(items: T[]): T {\r\n  const index = Math.floor(Math.random() * items.length)\r\n  return items[index]\r\n}\r\n"]},"metadata":{},"sourceType":"script"}