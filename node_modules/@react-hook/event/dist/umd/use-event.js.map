{"version":3,"file":"use-event.js","sources":["../../node_modules/@react-hook/passive-layout-effect/src/index.tsx","../../node_modules/@react-hook/latest/src/index.tsx","../../src/index.tsx"],"sourcesContent":["import * as React from 'react'\n\nconst usePassiveLayoutEffect =\n  React[\n    typeof document !== 'undefined' && document.createElement !== void 0\n      ? 'useLayoutEffect'\n      : 'useEffect'\n  ]\n\nexport default usePassiveLayoutEffect\n","import * as React from 'react'\n\nconst useLatest = <T extends any>(current: T) => {\n  const storedValue = React.useRef(current)\n  storedValue.current = current\n  return storedValue\n}\n\nexport default useLatest\n","import * as React from 'react'\nimport useLayoutEffect from '@react-hook/passive-layout-effect'\nimport useLatest from '@react-hook/latest'\n\nfunction useEvent<\n  T extends Window = Window,\n  K extends keyof WindowEventMap = keyof WindowEventMap\n>(\n  target: Window | null,\n  type: K,\n  listener: WindowEventListener<K>,\n  cleanup?: (...args: any[]) => void\n): void\nfunction useEvent<\n  T extends Document = Document,\n  K extends keyof DocumentEventMap = keyof DocumentEventMap\n>(\n  target: Document | null,\n  type: K,\n  listener: DocumentEventListener<K>,\n  cleanup?: (...args: any[]) => void\n): void\nfunction useEvent<\n  T extends HTMLElement = HTMLElement,\n  K extends keyof HTMLElementEventMap = keyof HTMLElementEventMap\n>(\n  target: React.RefObject<T> | T | null,\n  type: K,\n  listener: ElementEventListener<K>,\n  cleanup?: (...args: any[]) => void\n): void\nfunction useEvent(target: any, type: any, listener: any, cleanup: any): void {\n  const storedListener = useLatest(listener)\n  const storedCleanup = useLatest(cleanup)\n\n  useLayoutEffect(() => {\n    const targetEl = target && 'current' in target ? target.current : target\n    if (!targetEl) return\n\n    let didUnsubscribe = 0\n    function listener(this: any, ...args: any[]) {\n      if (didUnsubscribe) return\n      storedListener.current.apply(this, args)\n    }\n\n    targetEl.addEventListener(type, listener)\n    const cleanup = storedCleanup.current\n\n    return () => {\n      didUnsubscribe = 1\n      targetEl.removeEventListener(type, listener)\n      cleanup && cleanup()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [target, type])\n}\n\nexport type ElementEventListener<\n  K extends keyof HTMLElementEventMap = keyof HTMLElementEventMap\n> = (this: HTMLElement, ev: HTMLElementEventMap[K]) => any\n\nexport type DocumentEventListener<\n  K extends keyof DocumentEventMap = keyof DocumentEventMap\n> = (this: Document, ev: DocumentEventMap[K]) => any\n\nexport type WindowEventListener<\n  K extends keyof WindowEventMap = keyof WindowEventMap\n> = (this: Document, ev: WindowEventMap[K]) => any\n\nexport default useEvent\n"],"names":["usePassiveLayoutEffect","React","document","createElement","useLatest","current","storedValue","target","type","listener","cleanup","storedListener","storedCleanup","useLayoutEffect","didUnsubscribe","args","apply","this","targetEl","addEventListener","removeEventListener"],"mappings":"iOAEA,IAAMA,EACJC,EACsB,oBAAbC,eAAuD,IAA3BA,SAASC,cACxC,kBACA,aCJFC,EAAY,SAAgBC,OAC1BC,EAAcL,SAAaI,UACjCC,EAAYD,QAAUA,EACfC,UC0BT,SAAkBC,EAAaC,EAAWC,EAAeC,OACjDC,EAAiBP,EAAUK,GAC3BG,EAAgBR,EAAUM,GAEhCG,GAAgB,oBAKLJ,QACHK,8BAD0BC,2BAAAA,kBAE9BJ,EAAeN,QAAQW,MAAMC,KAAMF,QAN/BG,EAAWX,GAAU,YAAaA,EAASA,EAAOF,QAAUE,KAC7DW,OAEDJ,EAAiB,EAMrBI,EAASC,iBAAiBX,EAAMC,OAC1BC,EAAUE,EAAcP,eAEvB,WACLS,EAAiB,EACjBI,EAASE,oBAAoBZ,EAAMC,GACnCC,GAAWA,QAGZ,CAACH,EAAQC"}